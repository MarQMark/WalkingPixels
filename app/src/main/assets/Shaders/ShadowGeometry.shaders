#shader vertex
#version 320 es

in vec4 a_Position;

void main()
{
    gl_Position =  vec4(a_Position.x, a_Position.y, a_Position.z, 1.0);
}


#shader geometry
#version 320 es

layout (triangles) in;
layout (triangle_strip, max_vertices=18) out;

uniform mat4 shadowMatrices[6];

out vec4 FragPos;

void main()
{
    for(int face = 0; face < 6; ++face)
    {
        // Sets the face we are currently working on
        gl_Layer = face;
        for(int i = 0; i < 3; i++)
        {
            // Make transformed vertex
            FragPos = gl_in[i].gl_Position;
            gl_Position = shadowMatrices[face] * FragPos;
            EmitVertex();
        }
        EndPrimitive();
    }
}


#shader fragment
#version 320 es

precision mediump float;

in vec4 v_FragPos;

uniform vec3 u_LightPosition;
uniform float u_FarPlane;

void main()
{
    gl_FragDepth  = length(v_FragPos.xyz - u_LightPosition) / u_FarPlane;
}