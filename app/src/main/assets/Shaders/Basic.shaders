#shader vertex
#version 310 es

in vec4 a_Position;
in vec2 a_TexCoord;
in vec3 a_Normal;
in vec4 a_Color;
in float a_TextureSlot;

out vec2 v_TexCoord;
out vec3 v_Normal;
out vec3 v_CurrentPosition;
out vec4 v_Color;
out float v_TextureSlot;

uniform mat4 mvpmatrix;

void main()
{
    gl_Position = mvpmatrix * vec4(a_Position.x, a_Position.y, a_Position.z, 1.0);
    v_CurrentPosition = vec3(a_Position);
    v_TexCoord = a_TexCoord;
    v_Normal = a_Normal;
    v_Color = a_Color;
    v_TextureSlot =  a_TextureSlot;
}


#shader fragment
#version 310 es

precision mediump float;

in vec2 v_TexCoord;
in vec3 v_Normal;
in vec3 v_CurrentPosition;
in vec4 v_Color;
in float v_TextureSlot;

uniform sampler2D u_Textures[2];
uniform samplerCube u_ShadowCubeMap;
uniform vec3 u_LightPosition;
uniform vec4 u_LightColor;

out vec4 Color;

void main()
{
        int index = int(v_TextureSlot);
        vec4 texColor = texture(u_Textures[index], v_TexCoord);

        float a = 1.0 - (1.0 - texColor.w) * (1.0 - v_Color.w);
        float r = (v_Color.r * (1.0 - texColor.w) + texColor.r * texColor.w);
        float g = (v_Color.g * (1.0 - texColor.w) + texColor.g * texColor.w);
        float b = (v_Color.b * (1.0 - texColor.w) + texColor.b * texColor.w);


        // ambient lighting
	    float ambient = 0.2;

        // diffuse lighting
	    vec3 lightDirection = normalize(u_LightPosition - v_CurrentPosition);
	    float diffuse = max(dot(v_Normal, lightDirection), 0.0);


        // Shadow value
        float farPlane = 1000.0;
        float shadow = 0.0;
        vec3 fragToLight = v_CurrentPosition - u_LightPosition;
        float currentDepth = length(fragToLight);
        float bias = max(0.5 * (1.0 - dot(v_Normal, lightDirection)), 0.0005);

        // Not really a radius, more like half the width of a square
        float sampleRadius = 2.0;
        float offset = 0.02;
        for(float z = -sampleRadius; z <= sampleRadius; z++)
        {
        	for(float y = -sampleRadius; y <= sampleRadius; y++)
        	{
        	    for(float x = -sampleRadius; x <= sampleRadius; x++)
        	    {
        	        float closestDepth = texture(u_ShadowCubeMap, fragToLight + vec3(x, y, z) * offset).r;

        			closestDepth *= farPlane;
        			if (currentDepth > closestDepth + bias)
        				shadow += 1.0;
        	    }
        	}
        }
        // Average shadow
        shadow /= pow((sampleRadius * 2.0 + 1.0), 3.0);

        vec4 lightColor = u_LightColor * (diffuse * (1.0 - shadow) + ambient);
        lightColor.w = 1.0;

        Color = vec4(r, g, b, a) * lightColor;
}