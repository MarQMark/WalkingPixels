#shader vertex

attribute vec4 a_Position;
attribute vec2 a_TexCoord;
attribute vec3 a_Normal;
attribute vec4 a_Color;
attribute float a_TextureSlot;

varying vec2 v_TexCoord;
varying vec3 v_Normal;
varying vec3 v_CurrentPosition;
varying vec4 v_Color;
varying float v_TextureSlot;

uniform mat4 mvpmatrix;

void main()
{
    gl_Position = mvpmatrix * vec4(a_Position.x, a_Position.y, a_Position.z, 1.0);

    v_CurrentPosition = vec3(a_Position);
    v_TexCoord = a_TexCoord;
    v_Normal = a_Normal;
    v_Color = a_Color;
    v_TextureSlot =  a_TextureSlot;
}


#shader fragment

precision mediump float;

varying vec2 v_TexCoord;
varying vec3 v_Normal;
varying vec3 v_CurrentPosition;
varying vec4 v_Color;
varying float v_TextureSlot;

uniform sampler2D u_Textures[4];
uniform samplerCube u_ShadowCubeMap[4];
uniform float u_LightCount;
uniform vec3 u_LightPosition[4];
uniform vec4 u_LightColor[4];
uniform float u_LightIntensity[4];

float diffuseLighting(int lightIndex)
{
         if(u_LightPosition[lightIndex].y < v_CurrentPosition.y)
            return 0.0;

        vec3 lightDirection = u_LightPosition[lightIndex] - v_CurrentPosition;

        vec3 n_lightDirection = normalize(lightDirection);
	    float diffuse = dot(v_Normal, n_lightDirection);
	    diffuse = max(diffuse, 0.0);

        float distance = length(lightDirection);
        float intensity = 1.0 / u_LightIntensity[lightIndex];
        float attenuation = clamp(1.0 / (1.0 +  intensity * distance + 3.0 * (intensity * intensity) * (distance * distance)), 0.0, 1.0);
        diffuse *= attenuation;

	    return diffuse;
}

void main()
{
        int index = int(v_TextureSlot);
        vec4 texColor = texture2D(u_Textures[index], v_TexCoord);

        float a = 1.0 - (1.0 - texColor.w) * (1.0 - v_Color.w);
        float r = (v_Color.r * (1.0 - texColor.w) + texColor.r * texColor.w);
        float g = (v_Color.g * (1.0 - texColor.w) + texColor.g * texColor.w);
        float b = (v_Color.b * (1.0 - texColor.w) + texColor.b * texColor.w);

        if(a == 0.0)
            discard;

        if(u_LightCount == 0.0){
            gl_FragColor = vec4(r, g, b, a);
        }
        else {
            float ambient = 0.2;
            float diffuse = 0.0;
            int lightCount = int(u_LightCount);
            if(lightCount >= 1){
                diffuse += diffuseLighting(0);
            }
            if(lightCount >= 2){
                diffuse += diffuseLighting(1);
            }
            if(lightCount >= 3){
                diffuse += diffuseLighting(2);
            }
            if(lightCount >= 4){
                diffuse += diffuseLighting(3);
            }

            diffuse = min(diffuse, 1.0);

            vec4 lightColor = u_LightColor[0] * (diffuse + ambient);
            lightColor.w = 1.0;

            gl_FragColor = vec4(r, g, b, a) * lightColor;
        }
}