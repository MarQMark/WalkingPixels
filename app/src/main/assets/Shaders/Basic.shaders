#shader vertex

attribute vec4 a_Position;
attribute vec2 a_TexCoord;
attribute vec3 a_Normal;
attribute vec4 a_Color;
attribute float a_TextureSlot;

varying vec2 v_TexCoord;
varying vec3 v_Normal;
varying vec3 v_CurrentPosition;
varying vec4 v_Color;
varying float v_TextureSlot;

uniform mat4 mvpmatrix;

void main()
{
    gl_Position = mvpmatrix * vec4(a_Position.x, a_Position.y, a_Position.z, 1.0);
    v_CurrentPosition = vec3(a_Position);
    v_TexCoord = a_TexCoord;
    v_Normal = a_Normal;
    v_Color = a_Color;
    v_TextureSlot =  a_TextureSlot;
}


#shader fragment

precision mediump float;

varying vec2 v_TexCoord;
varying vec3 v_Normal;
varying vec3 v_CurrentPosition;
varying vec4 v_Color;
varying float v_TextureSlot;

uniform sampler2D u_Textures[2];
uniform vec3 u_LightPosition;
uniform vec4 u_LightColor;

void main()
{
        int index = int(v_TextureSlot);
        vec4 texColor = texture2D(u_Textures[index], v_TexCoord);

        float a = 1.0 - (1.0 - texColor.w) * (1.0 - v_Color.w);
        float r = (v_Color.r * (1.0 - texColor.w) + texColor.r * texColor.w);
        float g = (v_Color.g * (1.0 - texColor.w) + texColor.g * texColor.w);
        float b = (v_Color.b * (1.0 - texColor.w) + texColor.b * texColor.w);


        // ambient lighting
	    float ambient = 0.2;

        // diffuse lighting
	    vec3 lightDirection = normalize(u_LightPosition - v_CurrentPosition);
	    float diffuse = max(dot(v_Normal, lightDirection), 0.0);

        vec4 lightColor = u_LightColor * (diffuse + ambient);
        lightColor.w = 1.0;

        gl_FragColor = vec4(r, g, b, a) * lightColor;
}